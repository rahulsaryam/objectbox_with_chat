// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7279650269715909967),
      name: 'UserMessage',
      lastPropertyId: const IdUid(4, 2705352663843553774),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6304917363913726129),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1052087292574481837),
            name: 'mainMessageData',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 317394237556830990),
            name: 'senderId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2705352663843553774),
            name: 'receiverId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 7279650269715909967),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserMessage: EntityDefinition<UserMessage>(
        model: _entities[0],
        toOneRelations: (UserMessage object) => [],
        toManyRelations: (UserMessage object) => {},
        getId: (UserMessage object) => object.id,
        setId: (UserMessage object, int id) {
          object.id = id;
        },
        objectToFB: (UserMessage object, fb.Builder fbb) {
          final mainMessageDataOffset = object.mainMessageData == null
              ? null
              : fbb.writeList(object.mainMessageData!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final senderIdOffset = object.senderId == null
              ? null
              : fbb.writeString(object.senderId!);
          final receiverIdOffset = object.receiverId == null
              ? null
              : fbb.writeString(object.receiverId!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mainMessageDataOffset);
          fbb.addOffset(2, senderIdOffset);
          fbb.addOffset(3, receiverIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserMessage(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              mainMessageData: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 6),
              senderId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              receiverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserMessage] entity fields to define ObjectBox queries.
class UserMessage_ {
  /// see [UserMessage.id]
  static final id =
      QueryIntegerProperty<UserMessage>(_entities[0].properties[0]);

  /// see [UserMessage.mainMessageData]
  static final mainMessageData =
      QueryStringVectorProperty<UserMessage>(_entities[0].properties[1]);

  /// see [UserMessage.senderId]
  static final senderId =
      QueryStringProperty<UserMessage>(_entities[0].properties[2]);

  /// see [UserMessage.receiverId]
  static final receiverId =
      QueryStringProperty<UserMessage>(_entities[0].properties[3]);
}
